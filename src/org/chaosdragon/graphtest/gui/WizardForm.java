/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.chaosdragon.graphtest.gui;

import org.chaosdragon.graphtest.matrix.MatrixListModel;
import org.chaosdragon.graphtest.matrix.MatrixFiles;
import org.chaosdragon.graphtest.matrix.Matrix;
import java.io.File;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.FileChooserUI;
import javax.swing.text.StyledDocument;
import org.chaosdragon.graphtest.steps.*;
import org.chaosdragon.graphtest.tables.KeyTableModel;
import org.chaosdragon.tools.NaturalOrderComparator;

/**
 *
 * @author Guest
 */
public class WizardForm extends javax.swing.JFrame {

    /**
     * Creates new form WizardForm
     */
    private int totalSteps = 10;
    private int stepNumber = 1;
    private Command currentStep;
    private Switcher switcher = new Switcher();
    final JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));

    private Map<String, Matrix> matrixMap;

    MatrixListModel matrices = new MatrixListModel(new ArrayList<Matrix>());
    //INSERT KEYLIST HERE

    private HashMap<Class<? extends Command>, JPanel> panelMap = new HashMap<>();
    DefaultListModel listModel;

    ArrayList<String> keys;

    //EDIT ME
    public void updateNextPrevButtons() {
        nextButton.setEnabled(true);
        if (currentStep == null
                || currentStep.getClass().equals(NullCommand.class)
                || currentStep.getClass().equals(Step1.class)) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }

        if (currentStep instanceof FinalCommand) {
            nextButton.setEnabled(false);
        }

    }

    //Sets path and automatically loads file
    public void setTestEnvironment() {
        fc.setCurrentDirectory(new File("h://Archive//RTU//Specializeta Datu Apstrade (Novickis)//Faili"));
        //fc.setCurrentDirectory(new File("//home//mighty//Faili//Lekcijas//"));

        extraSteps.setSelected(true);

        for (int i = 1; i <= 4; i++) {
            File f = new File(fc.getCurrentDirectory() + "//Lekcijas//LekcijasS" + i + ".csv");
            //File f = new File(fc.getCurrentDirectory()+"//Uzdevums//Uzdevums"+i+".csv");        
            Matrix n = MatrixFiles.loadFromCsvFile(f.getAbsolutePath());
            matrices.add(n);
        }

    }

    public void setKeyModel(KeyTableModel model) {

        keyTable.setModel(model);
        
        //NEED A ROW LABEL TOO =(        
    }

    public WizardForm() {
        initComponents();

        panelMap.put(NullCommand.class, s1);
        panelMap.put(Step1.class, s2);
        panelMap.put(Step2.class, s2);
        panelMap.put(Step3.class, s2);
        panelMap.put(Step4.class, s2);
        panelMap.put(Step5.class, s2);
        panelMap.put(Step6.class, s2);
        panelMap.put(Step7.class, s2);
        panelMap.put(Step8.class, s2);
        panelMap.put(Step9.class, s3);
        panelMap.put(Step10.class, s2);
        panelMap.put(Step11.class, s2);
        panelMap.put(Step12.class, s2);

        panelMap.put(FinalCommand.class, s2);
        progressBarStateChanged(null);
        //currentStep = new Step1();
        s2.setVisible(false);
        s1.setVisible(true);
        updateNextPrevButtons();

        jList1.setModel(matrices);
        jList1ValueChanged(null);

        //FileChooser
        fc.setMultiSelectionEnabled(true);
        FileFilter filter = new FileNameExtensionFilter("CSV Graph", new String[]{"csv"});
        fc.setFileFilter(filter);
        fc.addChoosableFileFilter(filter);

        //Disable for real situation
        setTestEnvironment();

        currentStep = new NullCommand();
        setActivePanel(panelMap.get(currentStep.getClass()));
        listModel = new DefaultListModel();
        keyList.setModel(listModel);
        keys = new ArrayList<>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        topPanel = new javax.swing.JPanel();
        infoLabel = new javax.swing.JLabel();
        middlePanel = new javax.swing.JPanel();
        s1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        s2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        matrixPanel = new javax.swing.JPanel();
        matrixBox = new javax.swing.JComboBox();
        jButton9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        s3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        keyTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        keyList = new javax.swing.JList();
        keyBar = new javax.swing.JProgressBar();
        keyPrev = new javax.swing.JButton();
        keyNext = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        extraSteps = new javax.swing.JCheckBox();

        jMenuItem1.setMnemonic('c');
        jMenuItem1.setText("Copy");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Special Data Processing Technologies Â© 2014 David Griberman 101RDB242");
        setMinimumSize(new java.awt.Dimension(900, 600));
        setPreferredSize(new java.awt.Dimension(900, 600));

        topPanel.setPreferredSize(new java.awt.Dimension(651, 50));

        infoLabel.setText("Starting matrix initialization, please select blablablalbalblalbalblabal and input blablablalbalbal");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        middlePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        middlePanel.setPreferredSize(new java.awt.Dimension(1167, 566));
        middlePanel.setLayout(new java.awt.CardLayout());

        jList1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/doc_plus (2).png"))); // NOI18N
        jButton1.setText("Add Requirement");
        jButton1.setToolTipText("");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/doc_delete (2).png"))); // NOI18N
        jButton2.setText("Remove Requirement");
        jButton2.setToolTipText("");
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/lightbulb (2).png"))); // NOI18N
        jButton3.setText("Edit graph");
        jButton3.setToolTipText("");
        jButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/info (2).png"))); // NOI18N
        jButton4.setText("See matrix");
        jButton4.setToolTipText("");
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/db.png"))); // NOI18N
        jButton5.setText("Load from file(s)");
        jButton5.setToolTipText("");
        jButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/save.png"))); // NOI18N
        jButton6.setText("Save selected to file");
        jButton6.setToolTipText("");
        jButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/zoom.png"))); // NOI18N
        jButton7.setText("See Graph");
        jButton7.setToolTipText("");
        jButton7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/info (2).png"))); // NOI18N
        jButton8.setText("Edit matrix");
        jButton8.setToolTipText("");
        jButton8.setEnabled(false);
        jButton8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout s1Layout = new javax.swing.GroupLayout(s1);
        s1.setLayout(s1Layout);
        s1Layout.setHorizontalGroup(
            s1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(s1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(s1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(525, Short.MAX_VALUE))
        );
        s1Layout.setVerticalGroup(
            s1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(s1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        middlePanel.add(s1, "card3");

        s2.setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 14)); // NOI18N
        jTextPane1.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(jTextPane1);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        matrixPanel.setName(""); // NOI18N
        matrixPanel.setPreferredSize(new java.awt.Dimension(100, 406));
        matrixPanel.setRequestFocusEnabled(false);

        matrixBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixBoxActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/zoom.png"))); // NOI18N
        jButton9.setToolTipText("");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel1.setText("View graph");

        javax.swing.GroupLayout matrixPanelLayout = new javax.swing.GroupLayout(matrixPanel);
        matrixPanel.setLayout(matrixPanelLayout);
        matrixPanelLayout.setHorizontalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrixBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(matrixPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        matrixPanelLayout.setVerticalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrixBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addContainerGap(363, Short.MAX_VALUE))
        );

        jPanel1.add(matrixPanel, java.awt.BorderLayout.EAST);

        s2.add(jPanel1, "card3");

        middlePanel.add(s2, "card2");

        s3.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Relation table for current group (set 1 for simple, 2 for complex relation)");
        jLabel2.setToolTipText("");
        s3.add(jLabel2, java.awt.BorderLayout.NORTH);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        keyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        keyTable.setRowSelectionAllowed(false);
        keyTable.getTableHeader().setReorderingAllowed(false);
        keyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keyTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(keyTable);

        s3.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 283));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chaosdragon/graphtest/gui/icons/1415503646_key-64.png"))); // NOI18N
        jLabel3.setText("Select primary key");
        jLabel3.setToolTipText("");
        jPanel2.add(jLabel3);

        keyList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        keyList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        keyList.setMaximumSize(new java.awt.Dimension(333, 80));
        keyList.setMinimumSize(new java.awt.Dimension(333, 80));
        keyList.setPreferredSize(new java.awt.Dimension(150, 80));
        keyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                keyListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(keyList);

        jPanel2.add(jScrollPane4);

        keyBar.setMaximum(25);
        keyBar.setMinimum(1);
        keyBar.setToolTipText("");
        keyBar.setString("Group 1 of 8");
        keyBar.setStringPainted(true);
        keyBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                keyBarStateChanged(evt);
            }
        });
        jPanel2.add(keyBar);

        keyPrev.setText("< Previous");
        keyPrev.setToolTipText("");
        keyPrev.setEnabled(false);
        jPanel2.add(keyPrev);

        keyNext.setText("Next >");
        keyNext.setToolTipText("");
        keyNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyNextActionPerformed(evt);
            }
        });
        jPanel2.add(keyNext);

        s3.add(jPanel2, java.awt.BorderLayout.EAST);

        middlePanel.add(s3, "card4");

        getContentPane().add(middlePanel, java.awt.BorderLayout.CENTER);

        nextButton.setText("Next >");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("< Previous");
        previousButton.setToolTipText("");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        progressBar.setMaximum(25);
        progressBar.setMinimum(1);
        progressBar.setToolTipText("");
        progressBar.setRequestFocusEnabled(false);
        progressBar.setString("Step 4 of 10 (Part 1/3)");
        progressBar.setStringPainted(true);
        progressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progressBarStateChanged(evt);
            }
        });

        extraSteps.setText("Only show mandatory steps");
        extraSteps.setName(""); // NOI18N

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(extraSteps)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previousButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton)
                .addContainerGap())
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton)
                    .addComponent(nextButton)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extraSteps))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void clearText() {
        try {

            matrixPanel.setVisible(false);
            matrixBox.removeAllItems();
            matrixMap = new TreeMap<>(new NaturalOrderComparator());

            jTextPane1.getDocument().remove(0, jTextPane1.getDocument().getLength());
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    public void addToMatrixBox(String name, Matrix m) {

        matrixBox.addItem(name);
        matrixMap.put(name, m);
        matrixPanel.setVisible(true);

    }

    public void setPossibleKeys(String[] s) {
        keyList.setEnabled(true);
        //keyNext.setEnabled(true);

        listModel.removeAllElements();

        for (String p : s) {
            listModel.addElement(p);
        }

        if (s.length == 1) {
            keyList.setEnabled(false);
            keyList.setSelectedIndex(0);
        }

        keyListValueChanged(null); //????

    }

    
    //Sets selection of the keyList to the first
    public void setSelectedKeyInList() {
        
        if (keyList.getModel().getSize()>0) {
            keyList.setSelectedIndex(0);
        }
        
    }
    
    
    public void printText(String line) {
        try {
            StyledDocument doc = jTextPane1.getStyledDocument();
            doc.insertString(doc.getLength(), line, null);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //Called from the NEXT button
    private void doStep() {

        if (currentStep.getClass().equals(NullCommand.class)) {
            //MUST CHECK EMPTYNESS TOO
            if (matrices.getSize() == 0) {
                JOptionPane.showMessageDialog(
                        this, "You must add at least one requirement!", "Requirements missing", JOptionPane.WARNING_MESSAGE);

                return;
            }

            currentStep = new Step1(matrices.getList(), this);
            currentStep.setPreviousCommand(new NullCommand());
        }

        progressBar.setValue(progressBar.getValue() + 1);

        //Execute the step
        currentStep.execute();

        Command previous = currentStep;
        //Get next step
        currentStep = currentStep.getNext();
        currentStep.setPreviousCommand(previous);

        //Find the according panel to the next step and set it
        setActivePanel(panelMap.get(currentStep.getPreviousCommand().getClass()));
    }


    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

        //if (currentStep!=null && currentStep.getClass().equals(NullCommand.class)) currentStep=null;
        if (extraSteps.isSelected()) {
            doStep();
            while (currentStep.isSkippable()) {
                doStep();
            }

        } else {

            doStep();
        }


    }//GEN-LAST:event_nextButtonActionPerformed

    public void setActivePanel(JPanel p) {

        s1.setVisible(false);
        s2.setVisible(false);
        s3.setVisible(false);

        p.setVisible(true);

        infoLabel.setText("Current step" + currentStep.getClass().getSimpleName());
        updateNextPrevButtons();

    }

    private void stepBack() {
        //  if (currentStep.getClass().equals(NullCommand.class)) currentStep=null;        
        progressBar.setValue(progressBar.getValue() - 2);
        currentStep = currentStep.getPreviousCommand();

        if (currentStep.getClass().equals(NullCommand.class)) {
            setActivePanel(panelMap.get(currentStep.getClass()));
            return;
        }

        currentStep = currentStep.getPreviousCommand();

        if (currentStep.getClass().equals(NullCommand.class)) {
            setActivePanel(panelMap.get(currentStep.getClass()));
            return;
        }

        doStep();
    }


    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed

        keys = new ArrayList<>();
        //HAS NOT BEEN TESTED, BEWARE!
        if (extraSteps.isSelected()) {
            stepBack();
            while (currentStep.isSkippable()) {
                stepBack();
            }

        } else {
            stepBack();
        }


    }//GEN-LAST:event_previousButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jList1.getSelectedIndex() == -1) {
            return;
        }
        Matrix test = matrices.get(jList1.getSelectedIndex());
        GraphEditor mat = new GraphEditor(this, rootPaneCheckingEnabled, test, false); //Load ID here
        mat.setVisible(true);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jList1.getSelectedIndex() == -1) {
            return;
        }
        JOptionPane.showMessageDialog(
                null, new JLabel("<html><pre>" + matrices.get(jList1.getSelectedIndex()).print()));


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        matrices.add(new Matrix());

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (jList1.getSelectedIndex() == -1) {
            return;
        }
        matrices.remove(jList1.getSelectedIndex());
        jList1.clearSelection();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File[] s = fc.getSelectedFiles();
            File ss = s[0];
            String path = ss.getAbsolutePath();
            if (!path.toLowerCase().endsWith(".csv")) {
                path = path + ".csv";
            }

            MatrixFiles.generateCsvFile(path, matrices.get(jList1.getSelectedIndex()));
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        int returnVal = fc.showOpenDialog(this);

        //????
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File[] files = fc.getSelectedFiles();

            for (File f : files) {
                Matrix n = MatrixFiles.loadFromCsvFile(f.getAbsolutePath());
                matrices.add(n);
            }

        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (jList1.getSelectedIndex() == -1) {
            return;
        }
        Matrix test = matrices.get(jList1.getSelectedIndex());

        GraphEditor mat = new GraphEditor(this, rootPaneCheckingEnabled, test, true); //Load ID here

        mat.setArrange(GraphEditorPanel.Arrange.FAST_ORGANIC);
        mat.fixReadOnly();
        mat.updateTitle(jList1.getSelectedValue().toString());

        mat.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

        //Buttons that turn off when nothing is selected in list
        boolean isElementSelected = (jList1.getSelectedIndex() != -1);

        jButton2.setEnabled(isElementSelected);
        jButton3.setEnabled(isElementSelected);
        jButton4.setEnabled(isElementSelected);
        jButton6.setEnabled(isElementSelected);
        jButton7.setEnabled(isElementSelected);

    }//GEN-LAST:event_jList1ValueChanged

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void progressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressBarStateChanged
        progressBar.setString("Step " + progressBar.getValue() + " of " + progressBar.getMaximum());
    }//GEN-LAST:event_progressBarStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        jTextPane1.copy();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        if (matrixBox.getSelectedItem() != null) {
            Matrix m = matrixMap.get(matrixBox.getSelectedItem());

            GraphEditor mat = new GraphEditor(this, true, m, true); //Load ID here
            mat.setArrange(GraphEditorPanel.Arrange.FAST_ORGANIC);
            //mat.setArrange(GraphEditorPanel.Arrange.HIERARCHY);

            mat.fixReadOnly();
            mat.updateTitle(matrixBox.getSelectedItem().toString());

            mat.setVisible(true);
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void matrixBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matrixBoxActionPerformed

    private void keyBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_keyBarStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_keyBarStateChanged

    public void pressNextKeyKey() {
        keyNextActionPerformed(null);
    }


    private void keyNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyNextActionPerformed

        if (currentStep.getPreviousCommand() instanceof Step9) {

            if (keyList.getSelectedIndex() == -1) {

                System.err.println("FIX ME!");

                keys.add("ERROR");

            } else {

                String result = (String) keyList.getSelectedValue();
                keys.add(result.substring(1));
            }

            //FIX TO STEP 10 LATER!!! ^ TOO
            Step9 step = (Step9) currentStep.getPreviousCommand();

            if (step.hasNext()) {

                step.nextKey();
                keyBar.setValue(keyBar.getValue() + 1);//FAILS

                keyList.setSelectedIndex(0);

                //DEBUG ONLY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                if (keyList.getModel().getSize()>=2) {
                    if (keyList.getModel().getElementAt(0).equals("d5")
                            && keyList.getModel().getElementAt(1).equals("d6")) {

                        keyList.setSelectedIndex(1);

                    }
                    if (keyList.getModel().getElementAt(0).equals("d8")
                            && keyList.getModel().getElementAt(1).equals("d19")) {

                        keyList.setSelectedIndex(1);
                    }
                }
                //DEBUG ONLY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                
                

            } else {

                //FINISH UP AND ENABLE THE MAIN NEXT> BUTTON
                nextButton.setEnabled(true);
                keyNext.setEnabled(false);

                //RESET THE NEXT STEP
                Step9 previous = (Step9) currentStep.getPreviousCommand();
                currentStep = new Step10(previous);
                currentStep.setPreviousCommand(previous);
                ((Step10) currentStep).setKeys(keys);
                nextButtonActionPerformed(evt);

            }

        }

    }//GEN-LAST:event_keyNextActionPerformed

    private void keyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_keyListValueChanged
       //If nothing selected, disable NEXT

        if (keyList.getSelectedIndex() == -1) {
            keyNext.setEnabled(false);
        } else {
            keyNext.setEnabled(true);
        }


    }//GEN-LAST:event_keyListValueChanged

    private void keyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyTableMouseClicked

        //FIX ME
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            System.out.println("CHANGE THE VALUE HERE 1->2 2->1");
        }

    }//GEN-LAST:event_keyTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WizardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WizardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WizardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WizardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WizardForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JCheckBox extraSteps;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JProgressBar keyBar;
    private javax.swing.JList keyList;
    private javax.swing.JButton keyNext;
    private javax.swing.JButton keyPrev;
    private javax.swing.JTable keyTable;
    private javax.swing.JComboBox matrixBox;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JPanel middlePanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel s1;
    private javax.swing.JPanel s2;
    private javax.swing.JPanel s3;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
